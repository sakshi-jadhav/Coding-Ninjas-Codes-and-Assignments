1) Size of Long -
        Primitive data type 'long' is having size _______ byte(s) in Java Programming.
        Answer : 8
        
2) Datatype -
        Which of the following data type stores longest decimal number ?
        Answer : double
        Solution Description : 
        Out of all given options, only float and double can hold decimal numbers. Size of the float is 4 bytes and double is 8 bytes (in most of the compilers, as the size of data types is compiler specific). So double can store bigger decimal numbers.
        
3) Boolean  -
        Which of these values can be assigned to a boolean variable in Java?
        Answer : true and false
        Solution Description : 
        Boolean variable in java can only hold either true or false value.

4) Valid variable name - 
        Which of these is a valid variable name ?
        Answer : var1
        Solution Description : 
        In java, you cannot start your variable name with numbers and also they cannot contain any other special character except underscore (_) and dollar ($).

5) Uninitialized Local Variable - 
        Compiler never assigns a default value to an uninitialized local variable in Java Programming. Whether this statement is true or false ?
        Answer : true 
        Solution Description
        In java, its compulsory to initialise any local variable before using it because compiler don't assign any default/garbage value to variables.
6) Predict the output - 
        What is the output of the following code if the input is : 5 10 ?
                Scanner s = new Scanner(System.in);
                int a = s.nextInt();
                int b = s.nextInt();
                System.out.println(a+b);
        Answer : 15
        Solution Description : 
        "s.nextInt()" scans and returns the next token as int. A token is part of entered line that is separated from other tokens by space, tab or newline. So when input line is : “5 10”, then s.nextInt() returns the first token i.e. “5” as int and s.nextInt() again returns the next token i.e. “10” as int
        
7) Predict The String output - 
        What is the output of the following code if the input string is "Coding Ninjas"?
                Scanner s = new Scanner(System.in);
                String str;
                str = s.next();
                System.out.print(str);
        Answer : Coding
        Solution Description : 
        "s.next()" returns the next token as String. A token is part of entered line that is separated from other tokens by space, tab or newline. So when input line is - “Coding Ninjas” then s.next() returns the first token i.e. “Coding”
        
8) Multiple inputs - 
        What is the output of the following code if input is :
        10 abc def
                Scanner s = new Scanner(System.in);
                int a = s.nextInt();
                String str = s.next();
                System.out.print(a);
                System.out.println(str);
        Answer : 10abc
        Solution Description :
        "s.nextInt()" scans and returns the next token as int. A token is part of entered line that is separated from other tokens by space, tab or newline. So when input line is - “10 abc def” then s.nextInt() returns the first token as int i.e. “10” and s.next() returns the next token "abc”. 
        While printing, in first statement a is printed and then str. There is no space or nextline between both print. Hence output is : 10abc.
        
9) Integer and String - 
        What is the output of the following code if input is : abc def 10
                Scanner s = new Scanner(System.in);
                String str = s.next();
                int a = s.nextInt();
                System.out.print(str + " " + a);
        Answer : InputMismatchException
        Solution Description : 
        "s.next()" scans and returns the next token as String. A token is part of entered line that is separated from other tokens by space, tab or newline. So when input line is - “abc def 10” then s.next() returns the first token as String i.e. “abc” and s.nextInt() tries to convert the next token i.e. “def” into an int, which gives InputMismatchException.
        
        
 10) Average Marks - 
        Write a program to input a name(as a single character) and marks of three tests as m1, m2, and m3 of a student considering all the three marks have been given in integer format.
        Now, you need to calculate the average of the given marks and print it along with the name as mentioned in the output format section.
        All the test marks are in integers and hence calculate the average in integer as well. That is, you need to print the integer part of the average only and neglect the decimal part.
        Input format :
        Line 1 : Name(Single character)
        Line 2 : Marks scored in the 3 tests separated by single space. 
        Output format :
        First line of output prints the name of the student.
        Second line of the output prints the average mark.
        Constraints
        Marks for each student lie in the range 0 to 100 (both inclusive)
        Sample Input 1 :
        A
        3 4 6
        Sample Output 1 :
        A
        4
        Sample Input 2 :
        T
        7 3 8
        Sample Output 2 :
        T
        6
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        Solution code:
                
                import java.util.Scanner;

                public class Solution {


                        public static void main(String[] args) {

                                /* Your class should be named Solution.
                                * Read input as specified in the question.
                                * Print output as specified in the question.
                                */

                        Scanner sc = new Scanner(System.in);

                        String name = sc.next();
                        char c = name.charAt(0);
                        int m1 = sc.nextInt();
                        int m2 = sc.nextInt();
                        int m3 = sc.nextInt();
                        int avg = (m1+m2+m3) / 3;

                        System.out.println(c);
                        System.out.println(avg);

                        }

                }

        
        
        
        
        
